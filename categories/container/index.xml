<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on Morgoth</title>
    <link>http://canuxcheng.com/categories/container/</link>
    <description>Recent content in Container on Morgoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Mar 2020 20:55:52 +0800</lastBuildDate>
    
	<atom:link href="http://canuxcheng.com/categories/container/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K8S CNI</title>
      <link>http://canuxcheng.com/post/k8s_cni/</link>
      <pubDate>Thu, 26 Mar 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_cni/</guid>
      <description>Network add-ons https://github.com/containernetworking kube-router romana cilium weavenet calico flannel Flannel flannel是k8s最常用的网络插件. https://github.com/coreos/flannel 在所有node上部署cni-plugin: https://github.com/containernetworking/plugins/releases $ sudo mkdir -p /opt/cni/bin // 下载并解压所有插件命令</description>
    </item>
    
    <item>
      <title>K8S CSI</title>
      <link>http://canuxcheng.com/post/k8s_csi/</link>
      <pubDate>Wed, 25 Mar 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_csi/</guid>
      <description>CSI https://github.com/container-storage-interface/spec
 </description>
    </item>
    
    <item>
      <title>Kubectl</title>
      <link>http://canuxcheng.com/post/k8s_kubectl/</link>
      <pubDate>Fri, 10 Jan 2020 20:58:01 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_kubectl/</guid>
      <description>kubectl kubectl是kubernetes的管理工具. https://github.com/cloudnativelabs/kube-shell https://github.com/jonmosco/kube-ps1 https://github.com/ahmetb/kubectx 在master上通过kubectl命令管理集群. options: kubectl options # 查看所有命令可用选项 --kubeconfig kubectl --kubeconfig=$HOME/.kube.config (default)</description>
    </item>
    
    <item>
      <title>API</title>
      <link>http://canuxcheng.com/post/k8s_api/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_api/</guid>
      <description>API api-server统一的操作入口. kubectl, UI, 等都是通过api-server操作资源. payload可以是json，也可以是yaml. yaml文</description>
    </item>
    
    <item>
      <title>ArgoCD</title>
      <link>http://canuxcheng.com/post/k8s_argo/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_argo/</guid>
      <description>argo-cd https://github.com/argoproj/argo-cd
flux-cd https://github.com/fluxcd/flux
jenkins-X </description>
    </item>
    
    <item>
      <title>CoreDNS</title>
      <link>http://canuxcheng.com/post/k8s_coredns/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_coredns/</guid>
      <description>Service Discovery add-ons coreDNS CoreDNS 服务发现</description>
    </item>
    
    <item>
      <title>Etcd</title>
      <link>http://canuxcheng.com/post/k8s_etcd/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_etcd/</guid>
      <description>Etcd https://github.com/etcd-io/etcd 类似的有consul和zoomkeeper. etcdctl 使用证书访问: $ etcdctl \ --cacert=/etc/kubernetes/pki/etcd/ca.crt \ --cert=/etc/kubernetes/pki/etcd/server.crt \ --key=/etc/kubernetes/pki/etcd/server.key \ --insecure-skip-tls-verify=true \ &amp;lt;command&amp;gt; 查看所有key $ etcdctl get / --prefix --keys-only</description>
    </item>
    
    <item>
      <title>Operator</title>
      <link>http://canuxcheng.com/post/k8s_operator/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_operator/</guid>
      <description>Operator operator-framework https://operatorhub.io/
https://github.com/operator-framework</description>
    </item>
    
    <item>
      <title>Compose</title>
      <link>http://canuxcheng.com/post/compose/</link>
      <pubDate>Sat, 04 Jan 2020 21:53:40 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/compose/</guid>
      <description>docker-compose https://github.com/docker/compose 通过一个yaml文件来管理容器中的服务，包括网络和存储。 安装: https://docs.docker.com/compose/install/ $ sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose docker-compose命令 docker-compose [-f &amp;lt;arg&amp;gt;...] [options] [COMMAND] [ARGS...]</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>http://canuxcheng.com/post/k8s_dashboard/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_dashboard/</guid>
      <description>dashboard add-ons kubernetes-dashboard lens octant weave scope kubernetes-dashboard https://github.com/kubernetes/dashboard // 部署dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml // check $ kubectl -n kubernetes-dashboard get pods --watch --- apiVersion: v1 kind: ServiceAccount metadata: name: dashboard-admin namespace: kubernetes-dashboard --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: namespace: kubernetes-dashboard name: kubernetes-dashboard-admin roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount namespace: kubernetes-dashboard name: dashboard-admin</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>http://canuxcheng.com/post/k8s_ingress/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_ingress/</guid>
      <description>Nginx https://github.com/kubernetes/ingress-nginx // 部署 $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.34.1/deploy/static/provider/baremetal/deploy.yaml // 验证部署 $ kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx --watch // Detect installed version POD_NAMESPACE=ingress-nginx POD_NAME=$(kubectl get pods -n $POD_NAMESPACE -l app.kubernetes.io/name=ingress-nginx -o jsonpath=&#39;{.items[0].metadata.name}&#39;) $ kubectl exec -it $POD_NAME -n $POD_NAMESPACE -- /nginx-ingress-controller --version traefik https://github.com/containous/traefik</description>
    </item>
    
    <item>
      <title>Kubeadm</title>
      <link>http://canuxcheng.com/post/k8s_kubeadm/</link>
      <pubDate>Mon, 30 Dec 2019 21:47:17 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_kubeadm/</guid>
      <description>kubeadm https://github.com/kubernetes/kubeadm kubeadm是k8s自带的部署集群的工具. Install 准备工作 https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ 安装runtime https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/ 默认的cgroup驱动时cgroupfs,如果系统是syst</description>
    </item>
    
    <item>
      <title>Minikube</title>
      <link>http://canuxcheng.com/post/k8s_minikube/</link>
      <pubDate>Mon, 30 Dec 2019 21:47:17 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_minikube/</guid>
      <description>minikube https://kubernetes.io/zh/docs/setup/learning-environment/minikube/ minikube 能快速创建k8s的开发集群，支持在虚拟机上创建，也支持裸机创建. // 在裸机上创建： sudo minikube start --vm-driver=none</description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>http://canuxcheng.com/post/rancher/</link>
      <pubDate>Tue, 03 Dec 2019 21:54:05 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/rancher/</guid>
      <description>Rancher Deploy </description>
    </item>
    
    <item>
      <title>Image</title>
      <link>http://canuxcheng.com/post/image/</link>
      <pubDate>Tue, 03 Dec 2019 21:50:47 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/image/</guid>
      <description>image 容器镜像 docker image driver: aufs, btrfs, devicemapper, overlay. scratch scratch是空白镜像，一般用于基础镜像构建.比如制作alpine/ubuntu/debian/busybox镜</description>
    </item>
    
    <item>
      <title>OpenShift</title>
      <link>http://canuxcheng.com/post/openshift/</link>
      <pubDate>Mon, 02 Dec 2019 21:43:24 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/openshift/</guid>
      <description>OpenShift readhat kubernetes.
Deploy pre-install:
&amp;gt; check &amp;quot;sysctl net.ipv4.ip_forward&amp;quot; is set to 1 /etc/containers/registries.conf [registries.insecure] registries = [&#39;172.30.0.0/16&#39;] /etc/docker/daemon.json { &amp;quot;insecure-registries&amp;quot;: [ &amp;quot;172.30.0.0/16&amp;quot; ] } $ sudo systemctl daemon-reload $ sudo systemctl restart docker docker network inspect -f &amp;quot;{{range .IPAM.Config }}{{ .Subnet }}{{end}}&amp;quot; bridge # firewall-cmd --permanent --new-zone dockerc # firewall-cmd --permanent --zone dockerc --add-source 172.17.0.0/16 # firewall-cmd --permanent --zone dockerc --add-port 8443/tcp # firewall-cmd --permanent --zone dockerc --add-port 53/udp # firewall-cmd --permanent --zone dockerc --add-port 8053/udp # firewall-cmd --reload  install:</description>
    </item>
    
    <item>
      <title>Helm</title>
      <link>http://canuxcheng.com/post/k8s_helm/</link>
      <pubDate>Thu, 05 Sep 2019 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_helm/</guid>
      <description>Helm helm有两个组件: helm: 客户端 tiller: 服务端(helm3被移除) 概念: chart: 一个helm包，包含运行一个应用所需的镜像，依赖和资源. release: 在k8s集群上运</description>
    </item>
    
    <item>
      <title>k8S CRI</title>
      <link>http://canuxcheng.com/post/k8s_cri/</link>
      <pubDate>Wed, 05 Jun 2019 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_cri/</guid>
      <description>CRI CRI: Container Runtime Intarface 定义了k8s和container runtime进行交互的接口. 是k8s与container交互的标准. https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/ docker k8s_1.20 开始警告不再支持doc</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>http://canuxcheng.com/post/container/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/container/</guid>
      <description>Container OCI: Open Container Initiative. CRI: Container Runtime Interface. CNI: Container Network Interface. CSI: Container Storage Interface. OCI Open Container Initiative，也就是常说的OCI，是由多家公司共同成立的项目，并由linux基金会进行管理，</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://canuxcheng.com/post/docker/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/docker/</guid>
      <description>Docker https://store.docker.com/ https://hub.docker.com/ https://github.com/docker https://github.com/moby/moby Docker是一个容器引擎, 分为社区版CE, 和企业版EE, Docker不是虚拟机, 也不依赖虚拟化技术． docker-cli -&amp;gt; dockerd -&amp;gt; containerd -&amp;gt; shim -&amp;gt; runc conta</description>
    </item>
    
    <item>
      <title>Harbor</title>
      <link>http://canuxcheng.com/post/harbor/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/harbor/</guid>
      <description>Harbor https://github.com/goharbor/harbor Habor是由VMWare中国团队开源的容器镜像仓库, 用于存储和分发docker镜像的registry服务器. 安装步骤: 下载并解压安装包</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>http://canuxcheng.com/post/kubernetes/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/kubernetes/</guid>
      <description>Kubernetes https://github.com/kubernetes/kubernetes https://github.com/kubernetes/kubeadm https://github.com/kubernetes/kops https://github.com/kubernetes-sigs/kubespray kubernetes简称k8s, 是开源的容器编排工具。 安装单机版k8s: minikube 安装k8s集群: kubeadm (k8s内置的，类似于docker swarm mode,</description>
    </item>
    
    <item>
      <title>Swarm</title>
      <link>http://canuxcheng.com/post/swarm/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/swarm/</guid>
      <description>Swarm docker swarm 是 docker内置的容器编排工具。 从docker1.12开始swarm内置于docker engine. swarm mode具有内置kv存储，服务发现，负载均</description>
    </item>
    
    <item>
      <title>Swarm CNI</title>
      <link>http://canuxcheng.com/post/swarm_cni/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/swarm_cni/</guid>
      <description>CNI CNI: Container Network Intarface 单台host上的container通信 none host bridge 多台host之间的container通信 overlay macvlan 提供overlay/macvlan的网络服</description>
    </item>
    
    <item>
      <title>Swarm CSI</title>
      <link>http://canuxcheng.com/post/swarm_csi/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/swarm_csi/</guid>
      <description>CSI CSI: Container Storage Interface CSI提供容器的数据持久化服务. 容器管理数据的两种方式： 数据卷(Volumes) 挂载主机目录(bind mounts) 临时文件系统(tmpfs)</description>
    </item>
    
  </channel>
</rss>