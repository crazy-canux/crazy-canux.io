<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Morgoth</title>
    <link>http://canuxcheng.com/categories/django/</link>
    <description>Recent content in Django on Morgoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Jan 2017 01:13:36 +0000</lastBuildDate>
    
	<atom:link href="http://canuxcheng.com/categories/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Misc</title>
      <link>http://canuxcheng.com/post/django_misc/</link>
      <pubDate>Wed, 04 Jan 2017 01:13:36 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_misc/</guid>
      <description>Django的国际化和本地化 settings.py里面和国际化和本地化相关的设置: USE_I18N = True USE_L10N = True TIME_ZONE = &#39;UTC&#39; USE_TZ = True 国际化(i18N) 由开发者完成,本</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>http://canuxcheng.com/post/django_test/</link>
      <pubDate>Tue, 04 Oct 2016 04:51:30 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_test/</guid>
      <description>tests.py https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/ https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/ 单个测试文件 vim app/tests.py from django.test import TestCase 多个测试文件 mkdir -p app/tests vi test_case1.py vi test_case2.py 配置和运行 默认情况下运行 manage.py test 会创建测试数据库运行testcase，完成后自动销毁测试</description>
    </item>
    
    <item>
      <title>Form</title>
      <link>http://canuxcheng.com/post/django_form/</link>
      <pubDate>Tue, 04 Oct 2016 04:30:02 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_form/</guid>
      <description>forms.py from django import forms 表单 用户在浏览器中输入数据提交，对数据验证以及输入框的生成等。 django的表单系统的核心类是django.forms.Form类</description>
    </item>
    
    <item>
      <title>Admin</title>
      <link>http://canuxcheng.com/post/django_admin/</link>
      <pubDate>Tue, 04 Oct 2016 04:29:37 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_admin/</guid>
      <description>admin.py from django.contrib import admin 创建一个管理员用户： $ python manage.py createsuperuser 管理员登陆界面： http://localhost:8000/admin/ 在admin.py中注册模型，然后就可以在登陆界面管理模型了 from .models import Question admin.site.register(Question) 自定义管理表单</description>
    </item>
    
    <item>
      <title>URL</title>
      <link>http://canuxcheng.com/post/django_url/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_url/</guid>
      <description>urls.py from django.urls import path, include django请求站点的方法： ROOT_URLCONF，在settings.py中设置。 寻找urlpatterns，它是djang</description>
    </item>
    
    <item>
      <title>View</title>
      <link>http://canuxcheng.com/post/django_view/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_view/</guid>
      <description>views.py from django.shortcuts import render 定义自己的视图函数： from django.http import HttpResponse from django.template import RequestContext, loader # 导入模板中的类 from .models import Question def index(request): ... t = loader.get_template(&#39;application/index.html&#39;) c = RequestContext(request, {&#39;foo&#39;: &#39;bar&#39;}) return HttpResponse(t.render(c), content_type=&amp;quot;text/html&amp;quot;) 当请求一个页面时django会建立一个包</description>
    </item>
    
    <item>
      <title>Model</title>
      <link>http://canuxcheng.com/post/django_model/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_model/</guid>
      <description>models.py from django.db import models django模型是和数据库关联的，代码放在models.py，数据库信息在settings.py中统一配置即可。 每个模型对应数据库</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>http://canuxcheng.com/post/django_template/</link>
      <pubDate>Tue, 04 Oct 2016 04:12:49 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_template/</guid>
      <description>模板设置 模板引擎在settings.py设置, django有两套模板引擎： TEMPLATES = [ # DjangoTemplates { &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;, # 定义项目的通用模板, mysite/templates &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)], # True 表示在所有安装应</description>
    </item>
    
    <item>
      <title>Deploy</title>
      <link>http://canuxcheng.com/post/django_deploy/</link>
      <pubDate>Tue, 27 Sep 2016 10:23:22 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_deploy/</guid>
      <description>发布django项目 django内置一个轻量级web开发服务器。 如果要发布django项目需要另外的操作。 也可以发布到其它的云平台。 一般通过</description>
    </item>
    
    <item>
      <title>TPL</title>
      <link>http://canuxcheng.com/post/django_tpl/</link>
      <pubDate>Tue, 27 Sep 2016 01:33:42 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django_tpl/</guid>
      <description>Django Third Party Library. https://github.com/rosarior/awesome-django Add this application to your django project in settings.py. INSTALLED_APPS = ( &#39;south&#39;, &#39;debug_toolbar&#39;, &#39;crispy_forms&#39;, ... ) django-rest-framework django的RESTful API的application。 https://github.com/tomchristie/django-rest-framework/tree/master https://github.com/django-json-api/django-rest-framework-json-api https://github.com/SimpleJWT/django-rest-framework-simplejwt admin interface https://github.com/geex-arts/django-jet https://github.com/sehmaschine/django-grappelli https://github.com/darklow/django-suit https://github.com/sshwsfc/xadmin authentication https://github.com/etianen/django-python3-ldap https://github.com/pennersr/django-allauth/ https://github.com/django-guardian/django-guardian database https://github.com/django-dbbackup/django-dbbackup debug https://github.com/jazzband/django-debug-toolbar</description>
    </item>
    
    <item>
      <title>Django</title>
      <link>http://canuxcheng.com/post/django/</link>
      <pubDate>Tue, 20 Sep 2016 23:14:07 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/django/</guid>
      <description>Django django是python的web框架。 https://github.com/django/django https://www.djangoproject.com/ https://docs.djangoproject.com/zh-hans/3.1/contents/ django遵守MVC设计模式，采用MTV框架。 M: model,数据存取 T: template，如</description>
    </item>
    
  </channel>
</rss>